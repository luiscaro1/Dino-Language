Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    A
    AN
    ARE
    FALSE
    ID
    IS
    NEWLINE
    PERIOD
    QUEST
    TRUE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     term -> term TIMES factor
Rule 4     term -> term DIVIDED BY factor
Rule 5     expression -> term
Rule 6     term -> factor
Rule 7     factor -> number
Rule 8     number -> NUMBER

Terminals, with rules where they appear

A                    : 
AN                   : 
ARE                  : 
BY                   : 4
DIVIDED              : 4
FALSE                : 
ID                   : 
IS                   : 
MINUS                : 2
NEWLINE              : 
NUMBER               : 8
PERIOD               : 
PLUS                 : 1
QUEST                : 
TIMES                : 3
TRUE                 : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 0
factor               : 3 4 6
number               : 7
term                 : 1 2 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (5) expression -> . term
    (3) term -> . term TIMES factor
    (4) term -> . term DIVIDED BY factor
    (6) term -> . factor
    (7) factor -> . number
    (8) number -> . NUMBER

    NUMBER          shift and go to state 5

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 3
    number                         shift and go to state 4

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    PLUS            shift and go to state 6
    MINUS           shift and go to state 7


state 2

    (5) expression -> term .
    (3) term -> term . TIMES factor
    (4) term -> term . DIVIDED BY factor

    PLUS            reduce using rule 5 (expression -> term .)
    MINUS           reduce using rule 5 (expression -> term .)
    $end            reduce using rule 5 (expression -> term .)
    TIMES           shift and go to state 8
    DIVIDED         shift and go to state 9


state 3

    (6) term -> factor .

    TIMES           reduce using rule 6 (term -> factor .)
    DIVIDED         reduce using rule 6 (term -> factor .)
    PLUS            reduce using rule 6 (term -> factor .)
    MINUS           reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)


state 4

    (7) factor -> number .

    TIMES           reduce using rule 7 (factor -> number .)
    DIVIDED         reduce using rule 7 (factor -> number .)
    PLUS            reduce using rule 7 (factor -> number .)
    MINUS           reduce using rule 7 (factor -> number .)
    $end            reduce using rule 7 (factor -> number .)


state 5

    (8) number -> NUMBER .

    TIMES           reduce using rule 8 (number -> NUMBER .)
    DIVIDED         reduce using rule 8 (number -> NUMBER .)
    PLUS            reduce using rule 8 (number -> NUMBER .)
    MINUS           reduce using rule 8 (number -> NUMBER .)
    $end            reduce using rule 8 (number -> NUMBER .)


state 6

    (1) expression -> expression PLUS . term
    (3) term -> . term TIMES factor
    (4) term -> . term DIVIDED BY factor
    (6) term -> . factor
    (7) factor -> . number
    (8) number -> . NUMBER

    NUMBER          shift and go to state 5

    term                           shift and go to state 10
    factor                         shift and go to state 3
    number                         shift and go to state 4

state 7

    (2) expression -> expression MINUS . term
    (3) term -> . term TIMES factor
    (4) term -> . term DIVIDED BY factor
    (6) term -> . factor
    (7) factor -> . number
    (8) number -> . NUMBER

    NUMBER          shift and go to state 5

    term                           shift and go to state 11
    factor                         shift and go to state 3
    number                         shift and go to state 4

state 8

    (3) term -> term TIMES . factor
    (7) factor -> . number
    (8) number -> . NUMBER

    NUMBER          shift and go to state 5

    factor                         shift and go to state 12
    number                         shift and go to state 4

state 9

    (4) term -> term DIVIDED . BY factor

    BY              shift and go to state 13


state 10

    (1) expression -> expression PLUS term .
    (3) term -> term . TIMES factor
    (4) term -> term . DIVIDED BY factor

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    MINUS           reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    TIMES           shift and go to state 8
    DIVIDED         shift and go to state 9


state 11

    (2) expression -> expression MINUS term .
    (3) term -> term . TIMES factor
    (4) term -> term . DIVIDED BY factor

    PLUS            reduce using rule 2 (expression -> expression MINUS term .)
    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 8
    DIVIDED         shift and go to state 9


state 12

    (3) term -> term TIMES factor .

    TIMES           reduce using rule 3 (term -> term TIMES factor .)
    DIVIDED         reduce using rule 3 (term -> term TIMES factor .)
    PLUS            reduce using rule 3 (term -> term TIMES factor .)
    MINUS           reduce using rule 3 (term -> term TIMES factor .)
    $end            reduce using rule 3 (term -> term TIMES factor .)


state 13

    (4) term -> term DIVIDED BY . factor
    (7) factor -> . number
    (8) number -> . NUMBER

    NUMBER          shift and go to state 5

    factor                         shift and go to state 14
    number                         shift and go to state 4

state 14

    (4) term -> term DIVIDED BY factor .

    TIMES           reduce using rule 4 (term -> term DIVIDED BY factor .)
    DIVIDED         reduce using rule 4 (term -> term DIVIDED BY factor .)
    PLUS            reduce using rule 4 (term -> term DIVIDED BY factor .)
    MINUS           reduce using rule 4 (term -> term DIVIDED BY factor .)
    $end            reduce using rule 4 (term -> term DIVIDED BY factor .)

