
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'A AN ARE BY COLON COMMA DIVIDED FALSE ID IS MINUS NEGATIVE NEWLINE NUMBER PERIOD PLUS QUEST TIMES TRUE WHATprogram : program sentence\n               | sentencesentence : expression\n                | definition\n                | questionexpression : termexpression : expression PLUS term\n                  | expression MINUS term\n        term      : term TIMES factor\n                  | term DIVIDED BY factorterm : factorfactor : numberdefinition : id IS A entity\n                  | id IS AN entity\n                  | id ARE COLON list\n                  | id IS COLON listquestion : WHAT IS entity QUESTquestion : IS entity bool QUEST\n                | IS entity A datatype QUESTquestion : ARE list entity QUEST\n                | ARE entity A datatype QUESTentity : id\n              | datatypedatatype : number\n                | boollist : entity COMMA list\n            | entitybool : TRUE\n            | FALSEnumber : NUMBER\n              | NEGATIVE NUMBERid : ID'
    
_lr_action_items = {'WHAT':([0,1,2,3,4,5,6,11,12,13,14,16,24,25,26,27,28,29,33,34,35,36,48,49,50,51,52,53,54,56,58,59,60,61,],[10,10,-2,-3,-4,-5,-6,-11,-32,-12,-30,-1,-25,-23,-22,-24,-28,-29,-31,-7,-8,-9,-10,-13,-14,-16,-27,-15,-18,-20,-26,-17,-19,-21,]),'IS':([0,1,2,3,4,5,6,7,10,11,12,13,14,16,24,25,26,27,28,29,33,34,35,36,48,49,50,51,52,53,54,56,58,59,60,61,],[8,8,-2,-3,-4,-5,-6,21,32,-11,-32,-12,-30,-1,-25,-23,-22,-24,-28,-29,-31,-7,-8,-9,-10,-13,-14,-16,-27,-15,-18,-20,-26,-17,-19,-21,]),'ARE':([0,1,2,3,4,5,6,7,11,12,13,14,16,24,25,26,27,28,29,33,34,35,36,48,49,50,51,52,53,54,56,58,59,60,61,],[9,9,-2,-3,-4,-5,-6,22,-11,-32,-12,-30,-1,-25,-23,-22,-24,-28,-29,-31,-7,-8,-9,-10,-13,-14,-16,-27,-15,-18,-20,-26,-17,-19,-21,]),'ID':([0,1,2,3,4,5,6,8,9,11,12,13,14,16,24,25,26,27,28,29,30,31,32,33,34,35,36,38,39,40,41,46,48,49,50,51,52,53,54,56,58,59,60,61,],[12,12,-2,-3,-4,-5,-6,12,12,-11,-32,-12,-30,-1,-25,-23,-22,-24,-28,-29,12,-27,12,-31,-7,-8,-9,12,12,12,12,12,-10,-13,-14,-16,-27,-15,-18,-20,-26,-17,-19,-21,]),'NUMBER':([0,1,2,3,4,5,6,8,9,11,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,45,46,48,49,50,51,52,53,54,56,58,59,60,61,],[14,14,-2,-3,-4,-5,-6,14,14,-11,-32,-12,-30,33,-1,14,14,14,-25,-23,-22,-24,-28,-29,14,-27,14,-31,-7,-8,-9,14,14,14,14,14,14,14,14,-10,-13,-14,-16,-27,-15,-18,-20,-26,-17,-19,-21,]),'NEGATIVE':([0,1,2,3,4,5,6,8,9,11,12,13,14,16,17,18,19,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,45,46,48,49,50,51,52,53,54,56,58,59,60,61,],[15,15,-2,-3,-4,-5,-6,15,15,-11,-32,-12,-30,-1,15,15,15,-25,-23,-22,-24,-28,-29,15,-27,15,-31,-7,-8,-9,15,15,15,15,15,15,15,15,-10,-13,-14,-16,-27,-15,-18,-20,-26,-17,-19,-21,]),'$end':([1,2,3,4,5,6,11,12,13,14,16,24,25,26,27,28,29,33,34,35,36,48,49,50,51,52,53,54,56,58,59,60,61,],[0,-2,-3,-4,-5,-6,-11,-32,-12,-30,-1,-25,-23,-22,-24,-28,-29,-31,-7,-8,-9,-10,-13,-14,-16,-27,-15,-18,-20,-26,-17,-19,-21,]),'PLUS':([3,6,11,13,14,33,34,35,36,48,],[17,-6,-11,-12,-30,-31,-7,-8,-9,-10,]),'MINUS':([3,6,11,13,14,33,34,35,36,48,],[18,-6,-11,-12,-30,-31,-7,-8,-9,-10,]),'TIMES':([6,11,13,14,33,34,35,36,48,],[19,-11,-12,-30,-31,19,19,-9,-10,]),'DIVIDED':([6,11,13,14,33,34,35,36,48,],[20,-11,-12,-30,-31,20,20,-9,-10,]),'TRUE':([8,9,12,14,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,43,45,46,52,58,],[28,28,-32,-30,28,-25,-23,-22,-24,-28,-29,28,-27,28,-31,28,28,28,28,28,28,28,-27,-26,]),'FALSE':([8,9,12,14,23,24,25,26,27,28,29,30,31,32,33,38,39,40,41,43,45,46,52,58,],[29,29,-32,-30,29,-25,-23,-22,-24,-28,-29,29,-27,29,-31,29,29,29,29,29,29,29,-27,-26,]),'A':([12,14,21,23,24,25,26,27,28,29,31,33,],[-32,-30,38,43,-25,-23,-22,-24,-28,-29,45,-31,]),'COMMA':([12,14,24,25,26,27,28,29,31,33,52,],[-32,-30,-25,-23,-22,-24,-28,-29,46,-31,46,]),'QUEST':([12,14,24,25,26,27,28,29,33,42,44,47,55,57,],[-32,-30,-25,-23,-22,-24,-28,-29,-31,54,56,59,60,61,]),'BY':([20,],[37,]),'AN':([21,],[39,]),'COLON':([21,22,],[40,41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'sentence':([0,1,],[2,16,]),'expression':([0,1,],[3,3,]),'definition':([0,1,],[4,4,]),'question':([0,1,],[5,5,]),'term':([0,1,17,18,],[6,6,34,35,]),'id':([0,1,8,9,30,32,38,39,40,41,46,],[7,7,26,26,26,26,26,26,26,26,26,]),'factor':([0,1,17,18,19,37,],[11,11,11,11,36,48,]),'number':([0,1,8,9,17,18,19,30,32,37,38,39,40,41,43,45,46,],[13,13,27,27,13,13,13,27,27,13,27,27,27,27,27,27,27,]),'entity':([8,9,30,32,38,39,40,41,46,],[23,31,44,47,49,50,52,52,52,]),'bool':([8,9,23,30,32,38,39,40,41,43,45,46,],[24,24,42,24,24,24,24,24,24,24,24,24,]),'datatype':([8,9,30,32,38,39,40,41,43,45,46,],[25,25,25,25,25,25,25,25,55,57,25,]),'list':([9,40,41,46,],[30,51,53,58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program sentence','program',2,'p_program','dparse.py',9),
  ('program -> sentence','program',1,'p_program','dparse.py',10),
  ('sentence -> expression','sentence',1,'p_sentence','dparse.py',23),
  ('sentence -> definition','sentence',1,'p_sentence','dparse.py',24),
  ('sentence -> question','sentence',1,'p_sentence','dparse.py',25),
  ('expression -> term','expression',1,'p_expression','dparse.py',30),
  ('expression -> expression PLUS term','expression',3,'p_binary_operators','dparse.py',35),
  ('expression -> expression MINUS term','expression',3,'p_binary_operators','dparse.py',36),
  ('term -> term TIMES factor','term',3,'p_binary_operators','dparse.py',37),
  ('term -> term DIVIDED BY factor','term',4,'p_binary_operators','dparse.py',38),
  ('term -> factor','term',1,'p_term','dparse.py',54),
  ('factor -> number','factor',1,'p_factor','dparse.py',59),
  ('definition -> id IS A entity','definition',4,'p_definition','dparse.py',64),
  ('definition -> id IS AN entity','definition',4,'p_definition','dparse.py',65),
  ('definition -> id ARE COLON list','definition',4,'p_definition','dparse.py',66),
  ('definition -> id IS COLON list','definition',4,'p_definition','dparse.py',67),
  ('question -> WHAT IS entity QUEST','question',4,'p_question','dparse.py',76),
  ('question -> IS entity bool QUEST','question',4,'p_question_is','dparse.py',80),
  ('question -> IS entity A datatype QUEST','question',5,'p_question_is','dparse.py',81),
  ('question -> ARE list entity QUEST','question',4,'p_question_are','dparse.py',89),
  ('question -> ARE entity A datatype QUEST','question',5,'p_question_are','dparse.py',90),
  ('entity -> id','entity',1,'p_entity','dparse.py',99),
  ('entity -> datatype','entity',1,'p_entity','dparse.py',100),
  ('datatype -> number','datatype',1,'p_datatype','dparse.py',105),
  ('datatype -> bool','datatype',1,'p_datatype','dparse.py',106),
  ('list -> entity COMMA list','list',3,'p_list','dparse.py',111),
  ('list -> entity','list',1,'p_list','dparse.py',112),
  ('bool -> TRUE','bool',1,'p_bool','dparse.py',120),
  ('bool -> FALSE','bool',1,'p_bool','dparse.py',121),
  ('number -> NUMBER','number',1,'p_number','dparse.py',129),
  ('number -> NEGATIVE NUMBER','number',2,'p_number','dparse.py',130),
  ('id -> ID','id',1,'p_id','dparse.py',138),
]
